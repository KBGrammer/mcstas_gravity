/*******************************************************************************
*
* McXtrace, X-ray tracing package
*         Copyright (C), All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: PSD_monitor
*
* %I
* Written by: Erik Knudsen
* Date: June 22, 2009
* Version: $Revision$
* Origin: Risoe
* Release: McXtrace 0.1
*
* Position-sensitive monitor.
*
* %D
* Based on neutron component written by Kim Lefmann
* An (nx times ny) pixel PSD monitor. This component may also be used as a beam
* detector. If instead of xwidth, yheight a radius is given, the component has a circular footprint
* and integrates circularly (caking).
*
* Example: PSD_monitor(xmin=-0.1, xmax=0.1, ymin=-0.1, ymax=0.1, nx=90, ny=90, filename="Output.psd")
*
*
* %P
* INPUT PARAMETERS:
*
* xmin:     Lower x bound of detector opening (m)
* xmax:     Upper x bound of detector opening (m)
* ymin:     Lower y bound of detector opening (m)
* ymax:     Upper y bound of detector opening (m)
* xwidth:   Width of detector. Overrides xmin,xmax. (m)
* yheight:  Height of detector. Overrides ymin,ymax. (m)
* radius:   Radius of circular detetor (m)
* nx:       Number of pixel columns (1)
* ny:       Number of pixel rows (1)
* nr:       Number of radial pixels (1)
* filename: Name of file in which to store the detector image (text)
* restore_xray: If set, the monitor does not influence the xray state (1)
*
* OUTPUT PARAMETERS:
*
* PSD_N:    Array of xray counts
* PSD_p:    Array of xray weight counts
* PSD_p2:   Array of second moments
*
* %E
*******************************************************************************/

DEFINE COMPONENT PSD_monitor
DEFINITION PARAMETERS ()
SETTING PARAMETERS (xmin=-0.05, xmax=0.05, ymin=-0.05, ymax=0.05, xwidth=0, yheight=0, radius=0,
    int nx=90, int ny=90, int nr=0, string filename="", restore_xray=0)
OUTPUT PARAMETERS (PSD_N, PSD_p, PSD_p2)
/* X-ray parameters: (x,y,z,kx,ky,kz,phi,t,Ex,Ey,Ez,p) */

DECLARE
%{
  DArray2d PSD_N;
  DArray2d PSD_p;
  DArray2d PSD_p2;
%}

INITIALIZE
%{
  int i,j;
  double *p1,*p2,*p3;

  if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
  if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

  if ( ((xmin >= xmax) || (ymin >= ymax)) && !radius ) {
    printf("PSD_monitor: %s: Null detection area !\n"
        "ERROR        (xwidth,yheight,xmin,xmax,ymin,ymax,radius). Exiting",
        NAME_CURRENT_COMP);
    exit(0);
  }

  PSD_N = create_darr2d(nx, ny);
  PSD_p = create_darr2d(nx, ny);
  PSD_p2 = create_darr2d(nx, ny);
%}

TRACE
%{
  int i,j;

  PROP_Z0;
  if (x>xmin && x<xmax && y>ymin && y<ymax){
    i = floor((x - xmin)*nx/(xmax - xmin));
    j = floor((y - ymin)*ny/(ymax - ymin));
#pragma acc atomic 
    PSD_N[i][j] = PSD_N[i][j] +1;
#pragma acc atomic 
    PSD_p[i][j] = PSD_p[i][j] + p;
#pragma acc atomic 
    PSD_p2[i][j] = PSD_p2[i][j] + p*p;
    SCATTER;
  }
  
  if (restore_xray) {
    RESTORE_XRAY(INDEX_CURRENT_COMP, x, y, z, kx, ky, kz, phi, t, Ex, Ey, Ez, p);
  }
%}

SAVE
%{
  if(nx==1 && ny==1){
    DETECTOR_OUT_0D(NAME_CURRENT_COMP, PSD_N[0][0], PSD_p[0][0], PSD_p2[0][0]);
  }else if(nx==1){
    DETECTOR_OUT_1D(
        "PSD_monitor","Y Position[m]", "Intensity", "Y",
        ymin,ymax,ny,&PSD_N[0][0],&PSD_p[0][0],&PSD_p2[0][0],filename);
  }else if (ny==1){
    DETECTOR_OUT_1D(
        "PSD_monitor","X Position[m]", "Intensity", "X",
        xmin,xmax,nx,&PSD_N[0][0],&PSD_p[0][0],&PSD_p2[0][0],filename);
  }else{
    DETECTOR_OUT_2D(
        "PSD monitor",
        "X position [m]",
        "Y position [m]",
        xmin, xmax, ymin, ymax,
        nx, ny,
        *PSD_N,*PSD_p,*PSD_p2,
        filename);
  }
%}

FINALLY
%{
  destroy_darr2d(PSD_N);
  destroy_darr2d(PSD_p);
  destroy_darr2d(PSD_p2);
%}
MCDISPLAY
%{
  multiline(5, (double)xmin, (double)ymin, 0.0,
               (double)xmax, (double)ymin, 0.0,
               (double)xmax, (double)ymax, 0.0,
               (double)xmin, (double)ymax, 0.0,
               (double)xmin, (double)ymin, 0.0);
%}

END
