/*******************************************************************************
*
* McXtrace, X-ray tracing package
*         Copyright, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*         University of Copenhagen, Copenhagen, Denmark
*
* Component: Arm
*
* %I
*
* Written by: Kim Lefmann and Kristian Nielsen
* Modified by: Erik Knudsen 
* Date: September 2009
* Version: 1.0
* Release: McXtrace 1.0
* Origin: Risoe
*
* Arm/optical bench
*
* %D
* An arm does not actually do anything, it is just there to set
* up a new coordinate system.
*
* %P
* Input parameters:
*
* (none)
*
* %E
*******************************************************************************/

DEFINE COMPONENT Scatter_log_asciidump
DEFINITION PARAMETERS ()
SETTING PARAMETERS ()
OUTPUT PARAMETERS ()
SHARE
%{
#ifndef LOGMAXPARTICLE
  #define LOGMAXPARTICLE 1000000 
#endif
%}
DECLARE
%{
  unsigned int logcounter;
  double particlestore[LOGMAXPARTICLE][12];
  unsigned long long uids[LOGMAXPARTICLE];
  char fullfile[1024];
  char outputdir[512];
%}

INITIALIZE
%{
  logcounter=0;
  if (dirname == NULL) {
    sprintf(outputdir,".");
  } else {
    sprintf(outputdir,dirname);
  }
  #ifndef USE_MPI
  sprintf(fullfile,"%s/%s.%s",outputdir,NAME_CURRENT_COMP,"log");
  #else
  sprintf(fullfile,"%s/%s_%i.%s",outputdir,NAME_CURRENT_COMP,mpi_node_rank,"log");
  #endif
%}
TRACE
%{
  /*drop all the logged particles to console*/
#ifdef MCLOG
  int jj=0;
  while (jj<_particle->_logindex){
    //_class_particle *pp=&(_particle->_log[jj]);
    unsigned int index;
#pragma acc atomic capture
    {
      index=logcounter++;
    }

    if (index<LOGMAXPARTICLE){
      particlestore[index][0]=-1;//_particle->xlog[jj];
      particlestore[index][1]=-1;//_particle->ylog[jj];
      particlestore[index][2]=_particle->zlog[jj];
      particlestore[index][3]=-1;//_particle->vxlog[jj];
      particlestore[index][4]=-1;//_particle->vylog[jj];
      particlestore[index][5]=-1;//_particle->vzlog[jj];
      particlestore[index][6]=-1;//_particle->sxlog[jj];
      particlestore[index][7]=-1;//_particle->sylog[jj];
      particlestore[index][8]=-1;//_particle->szlog[jj];
      particlestore[index][9]=-1;//_particle->tlog[jj];
      particlestore[index][10]=_particle->plog[jj];
      uids[index]=_particle->_uid;
    }
    jj++;
  }
#endif
%}

FINALLY
%{
#ifdef MCLOG
  int ii,jj;
  FILE * fp;
  printf("Storing event log -->  %s\n",fullfile);
  fp = fopen(fullfile, "w+");
  jj=logcounter>LOGMAXPARTICLE ? LOGMAXPARTICLE : logcounter;
  for (ii=0;ii<jj;ii++){
    fprintf(fp,"pseudoparticle %u (uid) %ld ",ii, uids[ii]);
    fprintf(fp,"(x,y,z) %g %g %g ",particlestore[ii][0],particlestore[ii][1],particlestore[ii][2]);   
    fprintf(fp,"(vx,vy,vz) %g %g %g ",particlestore[ii][3],particlestore[ii][4],particlestore[ii][5]);
    fprintf(fp,"(sx,sy,sz) %g %g %g ",particlestore[ii][6],particlestore[ii][7],particlestore[ii][8]);    
    fprintf(fp,"(t,p) %g %g\n ",particlestore[ii][9],particlestore[ii][10]);   
  }
  fclose(fp);
  printf("Done storing logfile.\n");
#endif
%}


MCDISPLAY
%{
  /* A bit ugly; hard-coded dimensions. */
  
  line(0,0,0,0.2,0,0);
  line(0,0,0,0,0.2,0);
  line(0,0,0,0,0,0.2);
%}

END
